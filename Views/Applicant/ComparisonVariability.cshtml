@model List<EasyToEnter.ASP.Models.Models.VariabilityFavoritesModel>;
@using EasyToEnter.ASP.Models.Models;
@using static EasyToEnter.ASP.Tools.Colors;
@using static EasyToEnter.ASP.Tools.StringConverting;

@{
    ViewData["Title"] = "Сравнение вариативностей";
}

@*Карта начало*@
<vc:map-university-list data="@Model.Select(vf => vf.VariabilityModel!.FocusUniversityModel!.UniversityModel!).Distinct().ToList()"/>
@*Карта конец*@

<div class="bg-white rounded-20 shadow p-1 mb-3">
    @for (var i = 0; i < Model.Count; i++)
    {
        <div class="rounded-20 shadow-sm bg-white p-1 m-2" style="border: 3px solid @ColorList[i];">
            <a class="row px-2 py-1 text-decoration-none text-black" href="/Applicant/Variability?variability=@Model[i].VariabilityId">
                <div class="col text-start text-truncate">
                    @Model[i].VariabilityModel!.FocusUniversityModel!.LevelFocusModel!.FocusModel!.Name
                </div>
                <div class="col-auto text-end">
                    @Model[i].VariabilityModel!.FocusUniversityModel!.UniversityModel!.Abbreviation
                </div>
            </a>
        </div>
    }
</div>

<div class="bg-white rounded-20 shadow p-1 mb-3">
    <div class="col text-center my-2">
        Стоимость обучения <small class="text-muted">(на текущий год)</small>
    </div>
    @for(var i = 0; i < Model.Count; i++)
    {
    <div class="rounded-20 shadow-sm bg-white p-1 m-2" style="border: 3px solid @ColorList[i];">
        <div class="row pl-2 pr-3 py-1 justify-content-center align-items-center">
            <div class="col text-start text-truncate">
                @Model[i].VariabilityModel!.FocusUniversityModel!.LevelFocusModel!.FocusModel!.Name
            </div>
            <div class="col-auto text-end">
                @if (Model[i].VariabilityModel!.YearHistoryVariability != null)
                {
                    @IntToString(Model[i].VariabilityModel!.YearHistoryVariability!.Tuition) 
                    <small class="text-muted"> руб.</small>
                }
                else
                {
                    <small class="text-muted">нет информации</small>
                }
            </div>
        </div>
    </div>
    }

    <div class="bg-white rounded-20 shadow-sm mx-2 mb-1" style="border: 1px solid #e6e6e6;">
        <a data-toggle="collapse" aria-expanded="true" aria-controls="collapseExample" href="#collapseVariabilityTuition">
            <div class="col btn">
                <div class="text-center">
                    История стоимости обучения <small class="text-muted">(показать)</small>
                </div>
            </div>
        </a>
        <div class="collapse" id="collapseVariabilityTuition">
            <canvas id="variabilityChartTuition"></canvas>
        </div>
    </div>
</div>


<div class="bg-white rounded-20 shadow p-1 mb-3">
    <div class="col text-center my-2">
        Количество мест <small class="text-muted">(на текущий год)</small>
    </div>
    @for(var i = 0; i < Model.Count; i++)
    {
    <div class="rounded-20 shadow-sm bg-white p-1 m-2" style="border: 3px solid @ColorList[i];">
        <div class="row pl-2 pr-3 py-1 justify-content-center align-items-center">
            <div class="col text-start text-truncate">
                @Model[i].VariabilityModel!.FocusUniversityModel!.LevelFocusModel!.FocusModel!.Name
            </div>
            <div class="col-auto text-end">
                @if (Model[i].VariabilityModel!.YearHistoryVariability != null)
                {
                    @IntToString(Model[i].VariabilityModel!.YearHistoryVariability!.NumberSeats) 
                    <small class="text-muted"> мест</small>
                }
                else
                {
                    <small class="text-muted">нет информации</small>
                }
            </div>
        </div>
    </div>
    }
    <div class="bg-white rounded-20 shadow-sm mx-2 mb-1" style="border: 1px solid #e6e6e6;">
        <a data-toggle="collapse" aria-expanded="true" aria-controls="collapseExample" href="#collapseVariabilityNumberSeats">
            <div class="col btn">
                <div class="text-center">
                    История количества мест <small class="text-muted">(показать)</small>
                </div>
            </div>
        </a>
        <div class="collapse" id="collapseVariabilityNumberSeats">
            <canvas id="variabilityChartNumberSeats"></canvas>
        </div>
    </div>
</div>


<div class="bg-white rounded-20 shadow p-1 mb-3">
    <div class="col text-center my-2">
        Проходной балл <small class="text-muted">(на текущий год)</small>
    </div>
    @for(var i = 0; i < Model.Count; i++)
    {
    <div class="rounded-20 shadow-sm bg-white p-1 m-2" style="border: 3px solid @ColorList[i];">
        <div class="row pl-2 pr-3 py-1 justify-content-center align-items-center">
            <div class="col text-start text-truncate">
                @Model[i].VariabilityModel!.FocusUniversityModel!.LevelFocusModel!.FocusModel!.Name
            </div>
            <div class="col-auto text-end">
                @if (Model[i].VariabilityModel!.YearHistoryVariability != null)
                {
                    <small class="text-muted"> от</small>
                    @IntToString(Model[i].VariabilityModel!.YearHistoryVariability!.PassingGrade) 
                    <small class="text-muted"> баллов</small>
                }
                else
                {
                    <small class="text-muted">нет информации</small>
                }
            </div>
        </div>
    </div>
    }
    <div class="bg-white rounded-20 shadow-sm mx-2 mb-1" style="border: 1px solid #e6e6e6;">
        <a data-toggle="collapse" aria-expanded="true" aria-controls="collapseExample" href="#collapseVariabilityPassingGrade">
            <div class="col btn">
                <div class="text-center">
                    История проходного балла <small class="text-muted">(показать)</small>
                </div>
            </div>
        </a>
        <div class="collapse" id="collapseVariabilityPassingGrade">
            <canvas id="variabilityChartPassingGrade"></canvas>
        </div>
    </div>
</div>

<div class="bg-white rounded-20 shadow p-1 mb-3">
    <div class="col text-center my-2">
        Основная информация
    </div>

    <div class="rounded-20 shadow-sm bg-white p-1 m-2" style="border: 1px solid #e6e6e6;">
        <div class="row pl-2 pr-3 py-1 justify-content-center align-items-center">
            <div class="col text-start text-truncate">
                Период обучения <small class="text-muted">(лет)</small>
            </div>

            @for (var j = 0; j < Model.Count; j++)
            {
                <div class="col-auto fw-bold text-end rounded-circle p-0 mr-1 d-flex justify-content-center align-items-center" style="background-color: @ColorList[j]; width: 35px; height: 35px;">
                    @Model[j].VariabilityModel!.TrainingPeriod
                </div>
            }
        </div>
    </div>

    <div class="rounded-20 shadow-sm bg-white p-1 m-2" style="border: 1px solid #e6e6e6;">
        <div class="row pl-2 pr-3 py-1 justify-content-center align-items-center">
            <div class="col text-start text-truncate">
                Вступительные экзамены <small class="text-muted">(наличие)</small>
            </div>

            @for (var j = 0; j < Model.Count; j++)
            {
                if (Model[j].VariabilityModel!.EntranceExams)
                {
                    <div class="col-auto fw-bold text-end rounded-circle p-0 mr-1 d-flex justify-content-center align-items-center" style="background-color: @ColorList[j]; width: 35px; height: 35px;">
                    </div>
                }
                else
                {
                    <div class="col-auto text-end rounded-circle p-0 mr-1" style="width: 35px; height: 35px">
                    </div>
                }
            }
        </div>
    </div>

    <div class="rounded-20 shadow-sm bg-white p-1 m-2" style="border: 1px solid #e6e6e6;">
        <div class="row pl-2 pr-3 py-1 justify-content-center align-items-center">
            <div class="col text-start text-truncate">
                Военная кафедра <small class="text-muted">(наличие в ВУЗе)</small>
            </div>

            @for (var j = 0; j < Model.Count; j++)
            {
                if (Model[j].VariabilityModel!.FocusUniversityModel!.UniversityModel!.MilitaryDepartment)
                {
                    <div class="col-auto fw-bold text-end rounded-circle p-0 mr-1 d-flex justify-content-center align-items-center" style="background-color: @ColorList[j]; width: 35px; height: 35px;">
                    </div>
                }
                else
                {
                    <div class="col-auto text-end rounded-circle p-0 mr-1" style="width: 35px; height: 35px">
                    </div>
                }
            }
        </div>
    </div>

    <div class="rounded-20 shadow-sm bg-white p-1 m-2" style="border: 1px solid #e6e6e6;">
        <div class="row pl-2 pr-3 py-1 justify-content-center align-items-center">
            <div class="col text-start text-truncate">
                Общежитие <small class="text-muted">(наличие в ВУЗе)</small>
            </div>

            @for (var j = 0; j < Model.Count; j++)
            {
                if (Model[j].VariabilityModel!.FocusUniversityModel!.UniversityModel!.Dormitorys!.Any())
                {
                    <div class="col-auto fw-bold text-end rounded-circle p-0 mr-1 d-flex justify-content-center align-items-center" style="background-color: @ColorList[j]; width: 35px; height: 35px;">
                    </div>
                }
                else
                {
                    <div class="col-auto text-end rounded-circle p-0 mr-1" style="width: 35px; height: 35px">
                    </div>
                }
            }
        </div>
    </div>

</div>


@{
    List<DisciplineModel> disciplineList = Model
        .SelectMany(vf => vf.VariabilityModel!.FocusUniversityModel!.DisciplineFocusUniversitys!)
        .Select(dfu => dfu.DisciplineModel!)
        .Distinct()
        .ToList();
}

<div class="bg-white rounded-20 shadow p-1 mb-3">
    <div class="col text-center my-2">
        Сравнение дисциплин
    </div>
    @for (var i = 0; i < disciplineList.Count; i++)
    {
        <div class="rounded-20 shadow-sm bg-white p-1 m-2" style="border: 1px solid #e6e6e6;">
            <div class="row pl-2 pr-3 py-1 justify-content-center align-items-center">
                <div class="col text-start text-truncate">
                    @disciplineList[i].Name
                </div>

                @for (var j = 0; j < Model.Count; j++)
                {
                    var disciplineFocusUniversityList = Model[j].VariabilityModel!.FocusUniversityModel!.DisciplineFocusUniversitys!;

                    var data = disciplineFocusUniversityList.SingleOrDefault(d => d.DisciplineModel!.Id == disciplineList[i].Id);

                    if (data != null)
                    {
                        <div class="col-auto fw-bold text-end rounded-circle p-0 mr-1 d-flex justify-content-center align-items-center" style="background-color: @ColorList[j]; width: 35px; height: 35px;">
                            @data.DisciplineCredit <small class="text-black fw-bold"> з.е.</small>
                        </div>
                    }
                    else
                    {
                        <div class="col-auto text-end rounded-circle p-0 mr-1" style="width: 35px; height: 35px">
                        </div>
                    }
                }
            </div>
        </div>
    }
</div>


@{
    List<AreaModel> areaList = Model
        .SelectMany(vf => vf.VariabilityModel!.FocusUniversityModel!.LevelFocusModel!.FocusModel!.AreaFocuss!)
        .Select(a => a.AreaModel!)
        .Distinct()
        .ToList();
}

<div class="bg-white rounded-20 shadow p-1 mb-3">
    <div class="col text-center my-2">
        Сравнение областей направленности
    </div>
    @for (var i = 0; i < areaList.Count; i++)
    {
        <div class="rounded-20 shadow-sm bg-white p-1 m-2" style="border: 1px solid #e6e6e6;">
            <div class="row pl-2 pr-3 py-1 justify-content-center align-items-center">
                <div class="col text-start text-truncate">
                    @areaList[i].Name
                </div>

                @for (var j = 0; j < Model.Count; j++)
                {
                    var areaVariabilityList = Model[j].VariabilityModel!.FocusUniversityModel!.LevelFocusModel!.FocusModel!.AreaFocuss!;

                    var data = areaVariabilityList.SingleOrDefault(d => d.AreaModel!.Id == areaList[i].Id);

                    if (data != null)
                    {
                        <div class="col-auto text-end rounded-circle p-0 mr-1" style="background-color: @ColorList[j]; width: 35px; height: 35px;">
                        </div>
                    }
                    else
                    {
                        <div class="col-auto text-end rounded-circle p-0 mr-1" style="width: 35px; height: 35px">
                        </div>
                    }
                }
            </div>
        </div>
    }
</div>

@{
    List<FormModel> formList = Model
        .Select(vf => vf.VariabilityModel!.FormModel!)
        .Distinct()
        .ToList();
}

<div class="bg-white rounded-20 shadow p-1 mb-3">
    <div class="col text-center my-2">
        Форма обучения
    </div>
    @for (var i = 0; i < formList.Count; i++)
    {
        <div class="rounded-20 shadow-sm bg-white p-1 m-2" style="border: 1px solid #e6e6e6;">
            <div class="row pl-2 pr-3 py-1 justify-content-center align-items-center">
                <div class="col text-start text-truncate">
                    @formList[i].Name
                </div>

                @for (var j = 0; j < Model.Count; j++)
                    if (Model[j].VariabilityModel!.FormModel! == formList[i])
                    {
                        <div class="col-auto fw-bold text-end rounded-circle p-0 mr-1" style="background-color: @ColorList[j]; width: 35px; height: 35px;">
                        </div>
                    }
                    else
                    {
                        <div class="col-auto text-end rounded-circle p-0 mr-1" style="width: 35px; height: 35px">
                        </div>
                    }
            </div>
        </div>
    }
</div>

@{
    List<FormatModel> formatList = Model
        .Select(vf => vf.VariabilityModel!.FormatModel!)
        .Distinct()
        .ToList();
}

<div class="bg-white rounded-20 shadow p-1 mb-3">
    <div class="col text-center my-2">
        Формат обучения
    </div>
    @for (var i = 0; i < formatList.Count; i++)
    {
        <div class="rounded-20 shadow-sm bg-white p-1 m-2" style="border: 1px solid #e6e6e6;">
            <div class="row pl-2 pr-3 py-1 justify-content-center align-items-center">
                <div class="col text-start text-truncate">
                    @formatList[i].Name
                </div>

                @for (var j = 0; j < Model.Count; j++)
                    if (Model[j].VariabilityModel!.FormatModel! == formatList[i])
                    {
                        <div class="col-auto fw-bold text-end rounded-circle p-0 mr-1" style="background-color: @ColorList[j]; width: 35px; height: 35px;">
                        </div>
                    }
                    else
                    {
                        <div class="col-auto text-end rounded-circle p-0 mr-1" style="width: 35px; height: 35px">
                        </div>
                    }
            </div>
        </div>
    }
</div>

@{
    List<PaymentModel> paymentList = Model
        .Select(vf => vf.VariabilityModel!.PaymentModel!)
        .Distinct()
        .ToList();
}

<div class="bg-white rounded-20 shadow p-1 mb-3">
    <div class="col text-center my-2">
        Оплата обучения
    </div>
    @for (var i = 0; i < paymentList.Count; i++)
    {
        <div class="rounded-20 shadow-sm bg-white p-1 m-2" style="border: 1px solid #e6e6e6;">
            <div class="row pl-2 pr-3 py-1 justify-content-center align-items-center">
                <div class="col text-start text-truncate">
                    @paymentList[i].Name 
                </div>

                @for (var j = 0; j < Model.Count; j++)
                    if (Model[j].VariabilityModel!.PaymentModel! == paymentList[i])
                    {
                        <div class="col-auto fw-bold text-end rounded-circle p-0 mr-1" style="background-color: @ColorList[j]; width: 35px; height: 35px;">
                        </div>
                    }
                    else
                    {
                        <div class="col-auto text-end rounded-circle p-0 mr-1" style="width: 35px; height: 35px">
                        </div>
                    }
            </div>
        </div>
    }
</div>




























<script src="https://npmcdn.com/chart.js@latest/dist/chart.min.js"></script>
<script>

    @{
        // История за последнии 5 лет

        string labels = "";

        var years = Model.SelectMany(a => a.VariabilityModel!.HistoryVariabilitys!)
            .OrderBy(c => c.Year)
            .Select(b => b.Year)
            .Distinct()
            .ToList();

        for (var i = 0; i < years.Count; i++)
        {
            labels += $"{years[i]}, ";
        }
    }

    var variabilityTuition = document.getElementById("variabilityChartTuition");
    var variabilityNumberSeats = document.getElementById("variabilityChartNumberSeats");
    var variabilityPassingGrade = document.getElementById("variabilityChartPassingGrade");

    var variabilityChartTuition = new Chart(variabilityTuition, {
        type: "line",
        data: {
            labels: [@labels],
            datasets: [
                @for (var i = 0; i < Model.Count; i++)
                {
                    string data = "";

                    var history = Model[i].VariabilityModel!.HistoryVariabilitys!.OrderByDescending(hv => hv.Year).ToList();

                    for (var y = 0; y < history.Count; y++)
                    {
                        data += "{x:" + history[y].Year.ToString() + ", y:" + history[y].Tuition.ToString() + "}, ";
                    }

                    @:{
                        @:label: '@Model[i].VariabilityModel!.FocusUniversityModel!.LevelFocusModel!.FocusModel!.Name',
                        @:data: [@data],
                        @:borderColor: '@ColorList[i]'
                    @:},
                }
            ]
        }
    });

    var variabilityChartNumberSeats = new Chart(variabilityNumberSeats, {
            type: "line",
            data: {
                labels: [@labels],
                datasets: [
                    @for (var i = 0; i < Model.Count; i++)
                    {
                        string data = "";

                        var history = Model[i].VariabilityModel!.HistoryVariabilitys!.OrderByDescending(hv => hv.Year).ToList();

                        for (var y = 0; y < history.Count; y++)
                        {
                            data += "{x:" + history[y].Year.ToString() + ", y:" + history[y].NumberSeats.ToString() + "}, ";
                        }

                        @:{
                            @:label: '@Model[i].VariabilityModel!.FocusUniversityModel!.LevelFocusModel!.FocusModel!.Name',
                            @:data: [@data],
                            @:borderColor: '@ColorList[i]'
                        @:},
                    }
                ]
            }
        });

    var variabilityChartPassingGrade = new Chart(variabilityPassingGrade, {
            type: "line",
            data: {
                labels: [@labels],
                datasets: [
                    @for (var i = 0; i < Model.Count; i++)
                    {
                        string data = "";

                        var history = Model[i].VariabilityModel!.HistoryVariabilitys!.OrderByDescending(hv => hv.Year).ToList();

                        for (var y = 0; y < history.Count; y++)
                        {
                            data += "{x:" + history[y].Year.ToString() + ", y:" + history[y].PassingGrade.ToString() + "}, ";
                        }

                        @:{
                            @:label: '@Model[i].VariabilityModel!.FocusUniversityModel!.LevelFocusModel!.FocusModel!.Name',
                            @:data: [@data],
                            @:borderColor: '@ColorList[i]'
                        @:},
                    }
                ]
            }
        });
</script>