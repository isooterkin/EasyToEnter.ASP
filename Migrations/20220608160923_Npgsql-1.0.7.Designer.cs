// <auto-generated />
using System;
using EasyToEnter.ASP.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EasyToEnter.ASP.Migrations
{
    [DbContext(typeof(EasyToEnterDbContext))]
    [Migration("20220608160923_Npgsql-1.0.7")]
    partial class Npgsql107
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.AccreditationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Accreditation");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.AddressModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Building")
                        .HasColumnType("text");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("House")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Housing")
                        .HasColumnType("text");

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityId", "Street", "House", "Housing", "Building", "Latitude", "Longitude")
                        .IsUnique();

                    b.ToTable("Address");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.AreaFocusModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("integer");

                    b.Property<int>("FocusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FocusId");

                    b.HasIndex("AreaId", "FocusId")
                        .IsUnique();

                    b.ToTable("AreaFocus");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.AreaModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Area");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.CityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RegionId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.DirectionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Direction");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.DisciplineFocusUniversityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DisciplineCredit")
                        .HasColumnType("integer");

                    b.Property<int>("DisciplineId")
                        .HasColumnType("integer");

                    b.Property<int>("FocusUniversityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("FocusUniversityId", "DisciplineId")
                        .IsUnique();

                    b.ToTable("DisciplineFocusUniversity");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.DisciplineModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Discipline");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.DormitoryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<int?>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("UniversityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UniversityId");

                    b.HasIndex("AddressId", "UniversityId")
                        .IsUnique();

                    b.ToTable("Dormitory");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.EmployeeUniversityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<int>("UniversityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("UniversityId", "PersonId")
                        .IsUnique();

                    b.ToTable("EmployeeUniversity");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.EmployerOrganizationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("OrganizationId", "PersonId")
                        .IsUnique();

                    b.ToTable("EmployerOrganization");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.FocusModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DirectionId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DirectionId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Focus");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.FocusUniversityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("LevelFocusId")
                        .HasColumnType("integer");

                    b.Property<int>("UniversityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LevelFocusId");

                    b.HasIndex("UniversityId", "LevelFocusId")
                        .IsUnique();

                    b.ToTable("FocusUniversity");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.FormatModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Format");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.FormModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Form");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.GroupModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ScienceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ScienceId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.HistoryVariabilityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("NumberSeats")
                        .HasColumnType("integer");

                    b.Property<int>("PassingGrade")
                        .HasColumnType("integer");

                    b.Property<int>("Tuition")
                        .HasColumnType("integer");

                    b.Property<int>("VariabilityId")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VariabilityId", "Year")
                        .IsUnique();

                    b.ToTable("HistoryVariability");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.LevelFocusModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FocusId")
                        .HasColumnType("integer");

                    b.Property<int>("LevelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FocusId");

                    b.HasIndex("LevelId", "FocusId")
                        .IsUnique();

                    b.ToTable("LevelFocus");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.LevelModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Level");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.OrganizationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.PaymentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.PersonModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.PhoneNumberUniversityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Appointment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UniversityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId", "PhoneNumber")
                        .IsUnique();

                    b.ToTable("PhoneNumberUniversity");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.ProfessionFocusModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FocusId")
                        .HasColumnType("integer");

                    b.Property<int>("ProfessionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionId");

                    b.HasIndex("FocusId", "ProfessionId")
                        .IsUnique();

                    b.ToTable("ProfessionFocus");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.ProfessionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TypeProfessionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("TypeProfessionId");

                    b.ToTable("Profession");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.ProfessionVacancyModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProfessionId")
                        .HasColumnType("integer");

                    b.Property<int>("VacancyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VacancyId");

                    b.HasIndex("ProfessionId", "VacancyId")
                        .IsUnique();

                    b.ToTable("ProfessionVacancy");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.RegionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Region");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.RoleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Role");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.ScienceModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Science");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.SessionModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("LifeSpan")
                        .HasColumnType("integer");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.SpecializationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Specialization");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.SpecializationUniversityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SpecializationId")
                        .HasColumnType("integer");

                    b.Property<int>("UniversityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.HasIndex("SpecializationId", "UniversityId")
                        .IsUnique();

                    b.ToTable("SpecializationUniversity");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.SubjectFocusUniversityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FocusUniversityId")
                        .HasColumnType("integer");

                    b.Property<int>("PassingGrade")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FocusUniversityId");

                    b.HasIndex("SubjectId", "FocusUniversityId")
                        .IsUnique();

                    b.ToTable("SubjectFocusUniversity");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.SubjectModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.SubjectReplacementModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PassingGrade")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectFocusUniversityId")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SubjectFocusUniversityId");

                    b.HasIndex("SubjectId", "SubjectFocusUniversityId")
                        .IsUnique();

                    b.ToTable("SubjectReplacement");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.TypeProfessionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TypeProfession");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.UniversityFavoritesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<int>("UniversityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("UniversityId", "PersonId")
                        .IsUnique();

                    b.ToTable("UniversityFavorites");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.UniversityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("AccreditationId")
                        .HasColumnType("integer");

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("MilitaryDepartment")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccreditationId");

                    b.HasIndex("AddressId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("University");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.VacancyModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("Wages")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.ToTable("Vacancy");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.VariabilityFavoritesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<int>("VariabilityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("VariabilityId", "PersonId")
                        .IsUnique();

                    b.ToTable("VariabilityFavorites");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.VariabilityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("EntranceExams")
                        .HasColumnType("boolean");

                    b.Property<int>("FocusUniversityId")
                        .HasColumnType("integer");

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.Property<int>("FormatId")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentId")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingPeriod")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FocusUniversityId");

                    b.HasIndex("FormatId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("FormId", "FocusUniversityId", "PaymentId", "FormatId")
                        .IsUnique();

                    b.ToTable("Variability");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.AddressModel", b =>
                {
                    b.HasOne("EasyToEnter.ASP.Models.Models.CityModel", "CityModel")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CityModel");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.AreaFocusModel", b =>
                {
                    b.HasOne("EasyToEnter.ASP.Models.Models.AreaModel", "AreaModel")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyToEnter.ASP.Models.Models.FocusModel", "FocusModel")
                        .WithMany("AreaFocuss")
                        .HasForeignKey("FocusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AreaModel");

                    b.Navigation("FocusModel");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.CityModel", b =>
                {
                    b.HasOne("EasyToEnter.ASP.Models.Models.RegionModel", "RegionModel")
                        .WithMany("Citys")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegionModel");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.DirectionModel", b =>
                {
                    b.HasOne("EasyToEnter.ASP.Models.Models.GroupModel", "GroupModel")
                        .WithMany("Directions")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupModel");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.DisciplineFocusUniversityModel", b =>
                {
                    b.HasOne("EasyToEnter.ASP.Models.Models.DisciplineModel", "DisciplineModel")
                        .WithMany()
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyToEnter.ASP.Models.Models.FocusUniversityModel", "FocusUniversityModel")
                        .WithMany("DisciplineFocusUniversitys")
                        .HasForeignKey("FocusUniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DisciplineModel");

                    b.Navigation("FocusUniversityModel");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.DormitoryModel", b =>
                {
                    b.HasOne("EasyToEnter.ASP.Models.Models.AddressModel", "AddressModel")
                        .WithMany("Dormitorys")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyToEnter.ASP.Models.Models.UniversityModel", "UniversityModel")
                        .WithMany("Dormitorys")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressModel");

                    b.Navigation("UniversityModel");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.EmployeeUniversityModel", b =>
                {
                    b.HasOne("EasyToEnter.ASP.Models.Models.PersonModel", "PersonModel")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyToEnter.ASP.Models.Models.UniversityModel", "UniversityModel")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonModel");

                    b.Navigation("UniversityModel");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.EmployerOrganizationModel", b =>
                {
                    b.HasOne("EasyToEnter.ASP.Models.Models.OrganizationModel", "OrganizationModel")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyToEnter.ASP.Models.Models.PersonModel", "PersonModel")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganizationModel");

                    b.Navigation("PersonModel");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.FocusModel", b =>
                {
                    b.HasOne("EasyToEnter.ASP.Models.Models.DirectionModel", "DirectionModel")
                        .WithMany("Focuss")
                        .HasForeignKey("DirectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DirectionModel");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.FocusUniversityModel", b =>
                {
                    b.HasOne("EasyToEnter.ASP.Models.Models.LevelFocusModel", "LevelFocusModel")
                        .WithMany()
                        .HasForeignKey("LevelFocusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyToEnter.ASP.Models.Models.UniversityModel", "UniversityModel")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LevelFocusModel");

                    b.Navigation("UniversityModel");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.GroupModel", b =>
                {
                    b.HasOne("EasyToEnter.ASP.Models.Models.ScienceModel", "ScienceModel")
                        .WithMany("Groups")
                        .HasForeignKey("ScienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScienceModel");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.HistoryVariabilityModel", b =>
                {
                    b.HasOne("EasyToEnter.ASP.Models.Models.VariabilityModel", "VariabilityModel")
                        .WithMany("HistoryVariabilitys")
                        .HasForeignKey("VariabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VariabilityModel");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.LevelFocusModel", b =>
                {
                    b.HasOne("EasyToEnter.ASP.Models.Models.FocusModel", "FocusModel")
                        .WithMany("LevelFocuss")
                        .HasForeignKey("FocusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyToEnter.ASP.Models.Models.LevelModel", "LevelModel")
                        .WithMany("LevelFocuss")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FocusModel");

                    b.Navigation("LevelModel");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.PersonModel", b =>
                {
                    b.HasOne("EasyToEnter.ASP.Models.Models.RoleModel", "RoleModel")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoleModel");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.PhoneNumberUniversityModel", b =>
                {
                    b.HasOne("EasyToEnter.ASP.Models.Models.UniversityModel", "UniversityModel")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UniversityModel");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.ProfessionFocusModel", b =>
                {
                    b.HasOne("EasyToEnter.ASP.Models.Models.FocusModel", "FocusModel")
                        .WithMany("ProfessionFocuss")
                        .HasForeignKey("FocusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyToEnter.ASP.Models.Models.ProfessionModel", "ProfessionModel")
                        .WithMany()
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FocusModel");

                    b.Navigation("ProfessionModel");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.ProfessionModel", b =>
                {
                    b.HasOne("EasyToEnter.ASP.Models.Models.TypeProfessionModel", "TypeProfessionModel")
                        .WithMany()
                        .HasForeignKey("TypeProfessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeProfessionModel");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.ProfessionVacancyModel", b =>
                {
                    b.HasOne("EasyToEnter.ASP.Models.Models.ProfessionModel", "ProfessionModel")
                        .WithMany()
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyToEnter.ASP.Models.Models.VacancyModel", "VacancyModel")
                        .WithMany()
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfessionModel");

                    b.Navigation("VacancyModel");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.SessionModel", b =>
                {
                    b.HasOne("EasyToEnter.ASP.Models.Models.PersonModel", "PersonModel")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonModel");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.SpecializationUniversityModel", b =>
                {
                    b.HasOne("EasyToEnter.ASP.Models.Models.SpecializationModel", "SpecializationModel")
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyToEnter.ASP.Models.Models.UniversityModel", "UniversityModel")
                        .WithMany("SpecializationUniversitys")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpecializationModel");

                    b.Navigation("UniversityModel");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.SubjectFocusUniversityModel", b =>
                {
                    b.HasOne("EasyToEnter.ASP.Models.Models.FocusUniversityModel", "FocusUniversityModel")
                        .WithMany("SubjectFocusUniversitys")
                        .HasForeignKey("FocusUniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyToEnter.ASP.Models.Models.SubjectModel", "SubjectModel")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FocusUniversityModel");

                    b.Navigation("SubjectModel");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.SubjectReplacementModel", b =>
                {
                    b.HasOne("EasyToEnter.ASP.Models.Models.SubjectFocusUniversityModel", "SubjectFocusUniversityModel")
                        .WithMany("SubjectReplacements")
                        .HasForeignKey("SubjectFocusUniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyToEnter.ASP.Models.Models.SubjectModel", "SubjectModel")
                        .WithMany("SubjectReplacements")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubjectFocusUniversityModel");

                    b.Navigation("SubjectModel");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.UniversityFavoritesModel", b =>
                {
                    b.HasOne("EasyToEnter.ASP.Models.Models.PersonModel", "PersonModel")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyToEnter.ASP.Models.Models.UniversityModel", "UniversityModel")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonModel");

                    b.Navigation("UniversityModel");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.UniversityModel", b =>
                {
                    b.HasOne("EasyToEnter.ASP.Models.Models.AccreditationModel", "AccreditationModel")
                        .WithMany()
                        .HasForeignKey("AccreditationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyToEnter.ASP.Models.Models.AddressModel", "AddressModel")
                        .WithMany("Universitys")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccreditationModel");

                    b.Navigation("AddressModel");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.VacancyModel", b =>
                {
                    b.HasOne("EasyToEnter.ASP.Models.Models.OrganizationModel", "OrganizationModel")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganizationModel");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.VariabilityFavoritesModel", b =>
                {
                    b.HasOne("EasyToEnter.ASP.Models.Models.PersonModel", "PersonModel")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyToEnter.ASP.Models.Models.VariabilityModel", "VariabilityModel")
                        .WithMany("VariabilityFavoritess")
                        .HasForeignKey("VariabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonModel");

                    b.Navigation("VariabilityModel");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.VariabilityModel", b =>
                {
                    b.HasOne("EasyToEnter.ASP.Models.Models.FocusUniversityModel", "FocusUniversityModel")
                        .WithMany("Variabilitys")
                        .HasForeignKey("FocusUniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyToEnter.ASP.Models.Models.FormModel", "FormModel")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyToEnter.ASP.Models.Models.FormatModel", "FormatModel")
                        .WithMany()
                        .HasForeignKey("FormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyToEnter.ASP.Models.Models.PaymentModel", "PaymentModel")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FocusUniversityModel");

                    b.Navigation("FormModel");

                    b.Navigation("FormatModel");

                    b.Navigation("PaymentModel");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.AddressModel", b =>
                {
                    b.Navigation("Dormitorys");

                    b.Navigation("Universitys");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.DirectionModel", b =>
                {
                    b.Navigation("Focuss");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.FocusModel", b =>
                {
                    b.Navigation("AreaFocuss");

                    b.Navigation("LevelFocuss");

                    b.Navigation("ProfessionFocuss");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.FocusUniversityModel", b =>
                {
                    b.Navigation("DisciplineFocusUniversitys");

                    b.Navigation("SubjectFocusUniversitys");

                    b.Navigation("Variabilitys");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.GroupModel", b =>
                {
                    b.Navigation("Directions");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.LevelModel", b =>
                {
                    b.Navigation("LevelFocuss");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.RegionModel", b =>
                {
                    b.Navigation("Citys");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.ScienceModel", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.SubjectFocusUniversityModel", b =>
                {
                    b.Navigation("SubjectReplacements");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.SubjectModel", b =>
                {
                    b.Navigation("SubjectReplacements");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.UniversityModel", b =>
                {
                    b.Navigation("Dormitorys");

                    b.Navigation("PhoneNumbers");

                    b.Navigation("SpecializationUniversitys");
                });

            modelBuilder.Entity("EasyToEnter.ASP.Models.Models.VariabilityModel", b =>
                {
                    b.Navigation("HistoryVariabilitys");

                    b.Navigation("VariabilityFavoritess");
                });
#pragma warning restore 612, 618
        }
    }
}
